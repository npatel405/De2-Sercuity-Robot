-- Altera Memory Initialization File (MIF)

DEPTH = 2048;
WIDTH = 16;

ADDRESS_RADIX = HEX;
DATA_RADIX = HEX;

CONTENT
  BEGIN
    [000..7FF] : 0000;  -- Default to NOP

           000 : 2805;  -- 	JUMP   Init        ; Reset vector
           001 : B000;  -- 	RETI               ; Sonar interrupt (unused)
           002 : 28DA;  -- 	JUMP   CTimer_ISR  ; Timer interrupt
           003 : B000;  -- 	RETI               ; UART interrupt (unused)
           004 : B000;  -- 	RETI               ; Motor stall interrupt (unused)
           005 : 0A5B;  -- 	LOAD   Zero
           006 : 9883;  -- 	OUT    LVELCMD     ; Stop motors
           007 : 988B;  -- 	OUT    RVELCMD
           008 : 10DD;  -- 	STORE  DVel        ; Reset movement API variables
           009 : 10DC;  -- 	STORE  DTheta
           00A : 98B2;  -- 	OUT    SONAREN     ; Disable sonar (optional)
           00B : 980A;  -- 	OUT    BEEP        ; Stop any beeping (optional)
           00C : 8243;  -- 	CALL   SetupI2C    ; Configure the I2C to read the battery voltage
           00D : 8225;  -- 	CALL   BattCheck   ; Get battery voltage (and end if too low).
           00E : 9806;  -- 	OUT    LCD         ; Display battery voltage (hex, tenths of volts)
           00F : B930;  -- 	LOADI  &H130
           010 : 980A;  -- 	OUT    BEEP        ; Short hello beep
           011 : 9003;  -- 	IN     XIO         ; XIO contains SAFETY signal
           012 : 4A6A;  -- 	AND    Mask4       ; SAFETY signal is bit 4
           013 : 3819;  -- 	JPOS   WaitForUser ; If ready, jump to wait for PB3
           014 : 9002;  -- 	IN     TIMER       ; Use the timer value to
           015 : 4A67;  -- 	AND    Mask1       ; blink LED17 as a reminder to toggle SW17
           016 : 6008;  -- 	SHIFT  8           ; Shift over to LED17
           017 : 9807;  -- 	OUT    XLEDS       ; LED17 blinks at 2.5Hz (10Hz/4)
           018 : 2811;  -- 	JUMP   WaitForSafety
           019 : 9002;  -- 	IN     TIMER       ; Used to blink the LEDs above PB3
           01A : 4A67;  -- 	AND    Mask1
           01B : 6005;  -- 	SHIFT  5           ; Both LEDG6 and LEDG7
           01C : 1259;  -- 	STORE  Temp        ; (overkill, but looks nice)
           01D : 6001;  -- 	SHIFT  1
           01E : 5259;  -- 	OR     Temp
           01F : 9807;  -- 	OUT    XLEDS
           020 : 9003;  -- 	IN     XIO         ; XIO contains KEYs
           021 : 4A68;  -- 	AND    Mask2       ; KEY3 mask (KEY0 is reset and can't be read)
           022 : 3819;  -- 	JPOS   WaitForUser ; not ready (KEYs are active-low, hence JPOS)
           023 : 0A5B;  -- 	LOAD   Zero
           024 : 9807;  -- 	OUT    XLEDS       ; clear LEDs once ready to continue
           025 : 98C3;  -- 	OUT    RESETPOS    ; reset odometer in case wheels moved after programming
           026 : B80A;  -- 	LOADI  10          ; fire at 10 Hz (10 ms * 10).
           027 : 980C;  -- 	OUT    CTIMER      ; turn on timer peripheral
           028 : A802;  -- 	SEI    &B0010      ; enable interrupts from source 2 (timer)
           029 : 089B;  -- 	LOAD 	CURRENT_STATE
           02A : 209D;  -- 	SUB		NUM_STATE_START
           02B : 403E;  -- 	JZERO	CALL_STATE_START
           02C : 089B;  -- 	LOAD	CURRENT_STATE
           02D : 209E;  -- 	SUB		NUM_STATE_NW_CCW
           02E : 4040;  -- 	JZERO	CALL_STATE_NW_CCW
           02F : 089B;  -- 	LOAD	CURRENT_STATE
           030 : 209F;  -- 	SUB		NUM_STATE_SW_CCW
           031 : 4042;  -- 	JZERO	CALL_STATE_SW_CCW
           032 : 089B;  -- 	LOAD	CURRENT_STATE
           033 : 20A0;  -- 	SUB		NUM_STATE_S_CCW
           034 : 4044;  -- 	JZERO	CALL_STATE_S_CCW
           035 : 089B;  -- 	LOAD	CURRENT_STATE
           036 : 20A1;  -- 	SUB		NUM_STATE_SE_CCW
           037 : 4046;  -- 	JZERO	CALL_STATE_SE_CCW
           038 : 089B;  -- 	LOAD	CURRENT_STATE
           039 : 20A2;  -- 	SUB		NUM_STATE_E_CCW
           03A : 4048;  -- 	JZERO	CALL_STATE_E_CCW
           03B : 089B;  -- 	LOAD	CURRENT_STATE
           03C : 20A3;  -- 	SUB		NUM_STATE_NE_CCW
           03D : 404A;  -- 	JZERO	CALL_STATE_NE_CCW
           03E : 804C;  -- 	CALL 	EXE_STATE_START
           03F : 2829;  -- 	JUMP 	MAIN_STATE_MACHINE_LOOP
           040 : 8055;  -- 	CALL 	EXE_STATE_NW_CCW
           041 : 2829;  -- 	JUMP 	MAIN_STATE_MACHINE_LOOP
           042 : 805B;  -- 	CALL 	EXE_STATE_SW_CCW
           043 : 2829;  -- 	JUMP 	MAIN_STATE_MACHINE_LOOP
           044 : 8061;  -- 	CALL 	EXE_STATE_S_CCW
           045 : 2829;  -- 	JUMP 	MAIN_STATE_MACHINE_LOOP
           046 : 8067;  -- 	CALL 	EXE_STATE_SE_CCW
           047 : 2829;  -- 	JUMP 	MAIN_STATE_MACHINE_LOOP
           048 : 806D;  -- 	CALL 	EXE_STATE_E_CCW
           049 : 2829;  -- 	JUMP 	MAIN_STATE_MACHINE_LOOP
           04A : 8073;  -- 	CALL 	EXE_STATE_NE_CCW
           04B : 2829;  -- 	JUMP 	MAIN_STATE_MACHINE_LOOP
           04C : 089B;  -- 	LOAD 	CURRENT_STATE
           04D : 9804;  -- 	OUT 	SSEG1
           04E : 0A5D;  -- 	LOAD    TWO
           04F : 109C;  -- 	STORE	NUM_MOVE_SECONDS   ;;	Move forward two seconds
           050 : 8079;  -- 	CALL    MOVE_SECONDS
           051 : 089E;  -- 	LOAD	NUM_STATE_NW_CCW   ;;	Currently transitioning unconditionally
           052 : 109B;  -- 	STORE	CURRENT_STATE	
           053 : 821F;  -- 	CALL 	Wait1
           054 : 8800;  -- 	RETURN
           055 : 089B;  -- 	LOAD CURRENT_STATE
           056 : 9804;  -- 	OUT SSEG1
           057 : 089F;  -- 	LOAD	NUM_STATE_SW_CCW   ;;THIS IS HOW YOU TRANSITION STATES
           058 : 109B;  -- 	STORE	CURRENT_STATE	
           059 : 821F;  -- 	CALL Wait1
           05A : 8800;  -- 	RETURN
           05B : 089B;  -- 	LOAD CURRENT_STATE
           05C : 9804;  -- 	OUT SSEG1
           05D : 08A0;  -- 	LOAD	NUM_STATE_S_CCW   ;;THIS IS HOW YOU TRANSITION STATES
           05E : 109B;  -- 	STORE	CURRENT_STATE	
           05F : 821F;  -- 	CALL Wait1
           060 : 8800;  -- 	RETURN
           061 : 089B;  -- 	LOAD CURRENT_STATE
           062 : 9804;  -- 	OUT SSEG1
           063 : 08A1;  -- 	LOAD	NUM_STATE_SE_CCW   ;;THIS IS HOW YOU TRANSITION STATES
           064 : 109B;  -- 	STORE	CURRENT_STATE	
           065 : 821F;  -- 	CALL Wait1
           066 : 8800;  -- 	RETURN
           067 : 089B;  -- 	LOAD CURRENT_STATE
           068 : 9804;  -- 	OUT SSEG1
           069 : 08A2;  -- 	LOAD	NUM_STATE_E_CCW   ;;THIS IS HOW YOU TRANSITION STATES
           06A : 109B;  -- 	STORE	CURRENT_STATE	
           06B : 821F;  -- 	CALL Wait1
           06C : 8800;  -- 	RETURN
           06D : 089B;  -- 	LOAD CURRENT_STATE
           06E : 9804;  -- 	OUT SSEG1
           06F : 08A3;  -- 	LOAD	NUM_STATE_NE_CCW   ;;THIS IS HOW YOU TRANSITION STATES
           070 : 109B;  -- 	STORE	CURRENT_STATE	
           071 : 821F;  -- 	CALL Wait1
           072 : 8800;  -- 	RETURN
           073 : 089B;  -- 	LOAD CURRENT_STATE
           074 : 9804;  -- 	OUT SSEG1
           075 : 08A3;  -- 	LOAD	NUM_STATE_NE_CCW   ;;THIS IS HOW YOU TRANSITION STATES
           076 : 109B;  -- 	STORE	CURRENT_STATE	
           077 : 821F;  -- 	CALL Wait1
           078 : 8800;  -- 	RETURN
           079 : 089C;  -- 		LOAD 	NUM_MOVE_SECONDS	
           07A : 9804;  -- 		OUT		SSEG1	
           07B : 4098;  -- 		JZERO 	MAIN_MOVE_EXIT		;check to see if we are done moving
           07C : 0A7A;  -- 		LOAD	fMid
           07D : 10DD;  -- 		STORE 	dVel
           07E : 9802;  -- 		OUT		TIMER				;reset the timer
           07F : 9002;  -- 		IN 		TIMER
           080 : 6FFD;  -- 		ADDI 	-3
           081 : 307F;  -- 		JNEG 	MAIN_MOVE_TIMER_1
           082 : 0A7A;  -- 		LOAD	fMid
           083 : 10DD;  -- 		STORE 	dVel
           084 : 9802;  -- 		OUT		TIMER
           085 : 9002;  -- 		IN 		TIMER
           086 : 6FFD;  -- 		ADDI 	-3
           087 : 3085;  -- 		JNEG 	MAIN_MOVE_TIMER_2
           088 : 0A7A;  -- 		LOAD	fMid
           089 : 10DD;  -- 		STORE 	dVel
           08A : 9802;  -- 		OUT		TIMER
           08B : 9002;  -- 		IN 		TIMER
           08C : 6FFD;  -- 		ADDI 	-3
           08D : 308B;  -- 		JNEG 	MAIN_MOVE_TIMER_3
           08E : 0A7A;  -- 		LOAD	fMid
           08F : 10DD;  -- 		STORE 	dVel
           090 : 9802;  -- 		OUT		TIMER
           091 : 9002;  -- 		IN 		TIMER
           092 : 6FFF;  -- 		ADDI 	-1
           093 : 3091;  -- 		JNEG 	MAIN_MOVE_TIMER_4
           094 : 089C;  -- 	LOAD	NUM_MOVE_SECONDS
           095 : 6FFF;  -- 	ADDI 	-1
           096 : 109C;  -- 	STORE	NUM_MOVE_SECONDS
           097 : 2879;  -- 	JUMP	MAIN_MOVE_SECONDS
           098 : 0A5B;  -- 		LOAD	ZERO
           099 : 10DD;  -- 		STORE 	dVel
           09A : 8800;  -- 		RETURN
           09B : 0000;  -- CURRENT_STATE:	DW 0
           09C : 0000;  -- NUM_MOVE_SECONDS:	DW	0
           09D : 0000;  -- NUM_STATE_START:	DW 0
           09E : 0001;  -- NUM_STATE_NW_CCW:	DW 1
           09F : 0002;  -- NUM_STATE_SW_CCW:	DW 2
           0A0 : 0003;  -- NUM_STATE_S_CCW:	DW 3
           0A1 : 0004;  -- NUM_STATE_SE_CCW:	DW 4
           0A2 : 0005;  -- NUM_STATE_E_CCW:	DW 5
           0A3 : 0006;  -- NUM_STATE_NE_CCW:	DW 6
           0A4 : B800;  -- 	LOADI  0
           0A5 : 10DC;  -- 	STORE  DTheta      ; Desired angle 0
           0A6 : 0A7A;  -- 	LOAD   FMid        ; Defined below as 350.
           0A7 : 10DD;  -- 	STORE  DVel        ; Desired forward velocity
           0A8 : 90C0;  -- 	IN     XPOS        ; X position from odometry
           0A9 : 9806;  -- 	OUT    LCD         ; Display X position for debugging
           0AA : 2270;  -- 	SUB    OneMeter    ; Defined below as the robot units for 1 m
           0AB : 30A8;  -- 	JNEG   Test1       ; Not there yet, keep checking
           0AC : B800;  -- 	LOADI  0
           0AD : 10DD;  -- 	STORE  DVel
           0AE : B85A;  -- 	LOADI  90
           0AF : 10DC;  -- 	STORE  DTheta
           0B0 : 810B;  -- 	CALL   GetThetaErr ; get the heading error
           0B1 : 8125;  -- 	CALL   Abs         ; absolute value subroutine
           0B2 : 9806;  -- 	OUT    LCD         ; Display |angle error| for debugging
           0B3 : 6FFB;  -- 	ADDI   -5          ; check if within 5 degrees of target angle
           0B4 : 38B0;  -- 	JPOS   Test2       ; if not, keep testing
           0B5 : 0A78;  -- 	LOAD   FSlow       ; defined below as 100
           0B6 : 10DD;  -- 	STORE  DVel
           0B7 : 90C1;  -- 	IN     YPOS        ; get the Y position from odometry
           0B8 : 2270;  -- 	SUB    OneMeter
           0B9 : 9806;  -- 	OUT    LCD         ; Display distance error for debugging
           0BA : 30B7;  -- 	JNEG   Test3       ; if not there, keep testing
           0BB : 0A7C;  -- 	LOAD   FFast       ; defined below as 500
           0BC : 10DD;  -- 	STORE  DVel
           0BD : 90C0;  -- 	IN     XPOS        ; get the X position from odometry
           0BE : 8126;  -- 	CALL   Neg         ; negate
           0BF : 1188;  -- 	STORE  AtanX
           0C0 : 90C1;  -- 	IN     YPOS        ; get the X position from odometry
           0C1 : 8126;  -- 	CALL   Neg         ; negate
           0C2 : 1189;  -- 	STORE  AtanY
           0C3 : 8129;  -- 	CALL   Atan2       ; Gets the angle from (0,0) to (AtanX,AtanY)
           0C4 : 10DC;  -- 	STORE  DTheta
           0C5 : 9804;  -- 	OUT    SSEG1       ; Display angle for debugging
           0C6 : 90C0;  -- 	IN     XPOS
           0C7 : 121A;  -- 	STORE  L2X
           0C8 : 90C1;  -- 	IN     YPOS
           0C9 : 121B;  -- 	STORE  L2Y
           0CA : 81F0;  -- 	CALL   L2Estimate
           0CB : 9805;  -- 	OUT    SSEG2       ; Display distance for debugging
           0CC : 2273;  -- 	SUB    OneFoot
           0CD : 38BD;  -- 	JPOS   GoTo00      ; If >1 ft from destination, continue
           0CE : B800;  -- 	LOADI  0
           0CF : 10DD;  -- 	STORE  DVel
           0D0 : 28D1;  -- 	JUMP   Die
           0D1 : A00F;  -- 	CLI    &B1111      ; disable all interrupts
           0D2 : 0A5B;  -- 	LOAD   Zero        ; Stop everything.
           0D3 : 9883;  -- 	OUT    LVELCMD
           0D4 : 988B;  -- 	OUT    RVELCMD
           0D5 : 98B2;  -- 	OUT    SONAREN
           0D6 : 08D9;  -- 	LOAD   DEAD        ; An indication that we are dead
           0D7 : 9805;  -- 	OUT    SSEG2       ; "dEAd" on the sseg
           0D8 : 28D8;  -- 	JUMP   Forever     ; Do this forever.
           0D9 : DEAD;  -- 	DEAD:  DW &HDEAD   ; Example of a "local" variable
           0DA : 80DE;  -- 	CALL   ControlMovement
           0DB : B000;  -- 	RETI   ; return from ISR
           0DC : 0000;  -- DTheta:    DW 0
           0DD : 0000;  -- DVel:      DW 0
           0DE : B832;  -- 	LOADI  50          ; used for the CapValue subroutine
           0DF : 111E;  -- 	STORE  MaxVal
           0E0 : 810B;  -- 	CALL   GetThetaErr ; get the heading error
           0E1 : 6002;  -- 	SHIFT  2
           0E2 : 1108;  -- 	STORE  CMAErr      ; hold temporarily
           0E3 : 6002;  -- 	SHIFT  2           ; multiply by another 4
           0E4 : 8112;  -- 	CALL   CapValue    ; get a +/- max of 50
           0E5 : 1908;  -- 	ADD    CMAErr
           0E6 : 1108;  -- 	STORE  CMAErr      ; now contains a desired differential
           0E7 : B9FE;  -- 	LOADI  510
           0E8 : 111E;  -- 	STORE  MaxVal
           0E9 : 08DD;  -- 	LOAD   DVel
           0EA : 8112;  -- 	CALL   CapValue    ; ensure velocity is valid
           0EB : 10DD;  -- 	STORE  DVel        ; overwrite any invalid input
           0EC : 1908;  -- 	ADD    CMAErr
           0ED : 8112;  -- 	CALL   CapValue    ; ensure velocity is valid
           0EE : 110A;  -- 	STORE  CMAR
           0EF : 0908;  -- 	LOAD   CMAErr
           0F0 : 8126;  -- 	CALL   Neg         ; left wheel gets negative differential
           0F1 : 18DD;  -- 	ADD    DVel
           0F2 : 8112;  -- 	CALL   CapValue
           0F3 : 1109;  -- 	STORE  CMAL
           0F4 : 0908;  -- 	LOAD   CMAErr
           0F5 : 6001;  -- 	SHIFT  1           ; double the differential
           0F6 : 1108;  -- 	STORE  CMAErr
           0F7 : 090A;  -- 	LOAD   CMAR
           0F8 : 2109;  -- 	SUB    CMAL        ; calculate the actual differential
           0F9 : 2108;  -- 	SUB    CMAErr      ; should be 0 if nothing got capped
           0FA : 4103;  -- 	JZERO  CMADone
           0FB : 1108;  -- 	STORE  CMAErr      ; the missing part
           0FC : 1909;  -- 	ADD    CMAL
           0FD : 8112;  -- 	CALL   CapValue
           0FE : 1109;  -- 	STORE  CMAL
           0FF : 090A;  -- 	LOAD   CMAR
           100 : 2108;  -- 	SUB    CMAErr
           101 : 8112;  -- 	CALL   CapValue
           102 : 110A;  -- 	STORE  CMAR
           103 : 0909;  -- 	LOAD   CMAL
           104 : 9883;  -- 	OUT    LVELCMD
           105 : 090A;  -- 	LOAD   CMAR
           106 : 988B;  -- 	OUT    RVELCMD
           107 : 8800;  -- 	RETURN
           108 : 0000;  -- 	CMAErr: DW 0       ; holds angle error velocity
           109 : 0000;  -- 	CMAL:    DW 0      ; holds temp left velocity
           10A : 0000;  -- 	CMAR:    DW 0      ; holds temp right velocity
           10B : 90C2;  -- 	IN     THETA
           10C : 20DC;  -- 	SUB    DTheta      ; actual - desired angle
           10D : 8126;  -- 	CALL   Neg         ; desired - actual angle
           10E : 68B4;  -- 	ADDI   180
           10F : 811F;  -- 	CALL   Mod360
           110 : 6F4C;  -- 	ADDI   -180
           111 : 8800;  -- 	RETURN
           112 : 211E;  -- 	SUB     MaxVal
           113 : 3919;  -- 	JPOS    CapVelHigh
           114 : 191E;  -- 	ADD     MaxVal
           115 : 191E;  -- 	ADD     MaxVal
           116 : 311B;  -- 	JNEG    CapVelLow
           117 : 211E;  -- 	SUB     MaxVal
           118 : 8800;  -- 	RETURN
           119 : 091E;  -- 	LOAD    MaxVal
           11A : 8800;  -- 	RETURN
           11B : 091E;  -- 	LOAD    MaxVal
           11C : 8126;  -- 	CALL    Neg
           11D : 8800;  -- 	RETURN
           11E : 01FE;  -- 	MaxVal: DW 510
           11F : 3122;  -- 	JNEG   M360N
           120 : 6E98;  -- 	ADDI   -360
           121 : 291F;  -- 	JUMP   Mod360
           122 : 6968;  -- 	ADDI   360
           123 : 3122;  -- 	JNEG   M360N
           124 : 8800;  -- 	RETURN
           125 : 3928;  -- 	JPOS   Abs_r
           126 : 5A5A;  -- 	XOR    NegOne       ; Flip all bits
           127 : 6801;  -- 	ADDI   1            ; Add one (i.e. negate number)
           128 : 8800;  -- 	RETURN
           129 : 0989;  -- 	LOAD   AtanY
           12A : 8125;  -- 	CALL   Abs          ; abs(y)
           12B : 118B;  -- 	STORE  AtanT
           12C : 0988;  -- 	LOAD   AtanX        ; abs(x)
           12D : 8125;  -- 	CALL   Abs
           12E : 218B;  -- 	SUB    AtanT        ; abs(x) - abs(y)
           12F : 313A;  -- 	JNEG   A2_sw        ; if abs(y) > abs(x), switch arguments.
           130 : 0988;  -- 	LOAD   AtanX        ; Octants 1, 4, 5, 8
           131 : 3137;  -- 	JNEG   A2_R3
           132 : 8149;  -- 	CALL   A2_calc      ; Octants 1, 8
           133 : 3135;  -- 	JNEG   A2_R1n
           134 : 8800;  -- 	RETURN              ; Return raw value if in octant 1
           135 : 6968;  -- 	ADDI   360          ; Add 360 if we are in octant 8
           136 : 8800;  -- 	RETURN
           137 : 8149;  -- 	CALL   A2_calc      ; Octants 4, 5            
           138 : 68B4;  -- 	ADDI   180          ; theta' = theta + 180
           139 : 8800;  -- 	RETURN
           13A : 0989;  -- 	LOAD   AtanY        ; Swap input arguments
           13B : 118B;  -- 	STORE  AtanT
           13C : 0988;  -- 	LOAD   AtanX
           13D : 1189;  -- 	STORE  AtanY
           13E : 098B;  -- 	LOAD   AtanT
           13F : 1188;  -- 	STORE  AtanX
           140 : 3945;  -- 	JPOS   A2_R2        ; If Y positive, octants 2,3
           141 : 8149;  -- 	CALL   A2_calc      ; else octants 6, 7
           142 : 8126;  -- 	CALL   Neg          ; Negatge the number
           143 : 690E;  -- 	ADDI   270          ; theta' = 270 - theta
           144 : 8800;  -- 	RETURN
           145 : 8149;  -- 	CALL   A2_calc      ; Octants 2, 3
           146 : 8126;  -- 	CALL   Neg          ; negate the angle
           147 : 685A;  -- 	ADDI   90           ; theta' = 90 - theta
           148 : 8800;  -- 	RETURN
           149 : 0989;  -- 	LOAD   AtanY
           14A : 11E8;  -- 	STORE  d16sN        ; Y in numerator
           14B : 0988;  -- 	LOAD   AtanX
           14C : 11E9;  -- 	STORE  d16sD        ; X in denominator
           14D : 8175;  -- 	CALL   A2_div       ; divide
           14E : 09EE;  -- 	LOAD   dres16sQ     ; get the quotient (remainder ignored)
           14F : 118A;  -- 	STORE  AtanRatio
           150 : 11B1;  -- 	STORE  m16sA
           151 : 11B2;  -- 	STORE  m16sB
           152 : 816C;  -- 	CALL   A2_mult      ; X^2
           153 : 11B1;  -- 	STORE  m16sA
           154 : 098C;  -- 	LOAD   A2c
           155 : 11B2;  -- 	STORE  m16sB
           156 : 816C;  -- 	CALL   A2_mult
           157 : 6900;  -- 	ADDI   256          ; 256/256+0.28125X^2
           158 : 11E9;  -- 	STORE  d16sD
           159 : 098A;  -- 	LOAD   AtanRatio
           15A : 11E8;  -- 	STORE  d16sN        ; Ratio in numerator
           15B : 8175;  -- 	CALL   A2_div       ; divide
           15C : 09EE;  -- 	LOAD   dres16sQ     ; get the quotient (remainder ignored)
           15D : 11B1;  -- 	STORE  m16sA        ; <= result in radians
           15E : 098D;  -- 	LOAD   A2cd         ; degree conversion factor
           15F : 11B2;  -- 	STORE  m16sB
           160 : 816C;  -- 	CALL   A2_mult      ; convert to degrees
           161 : 118B;  -- 	STORE  AtanT
           162 : 6017;  -- 	SHIFT  -7           ; check 7th bit
           163 : 4A5C;  -- 	AND    One
           164 : 4169;  -- 	JZERO  A2_rdwn      ; round down
           165 : 098B;  -- 	LOAD   AtanT
           166 : 6018;  -- 	SHIFT  -8
           167 : 6801;  -- 	ADDI   1            ; round up
           168 : 8800;  -- 	RETURN
           169 : 098B;  -- 	LOAD   AtanT
           16A : 6018;  -- 	SHIFT  -8           ; round down
           16B : 8800;  -- 	RETURN
           16C : 818E;  -- 	CALL   Mult16s
           16D : 09B6;  -- 	LOAD   mres16sH
           16E : 6008;  -- 	SHIFT  8            ; move high word of result up 8 bits
           16F : 11B6;  -- 	STORE  mres16sH
           170 : 09B5;  -- 	LOAD   mres16sL
           171 : 6018;  -- 	SHIFT  -8           ; move low word of result down 8 bits
           172 : 4A6E;  -- 	AND    LowByte
           173 : 51B6;  -- 	OR     mres16sH     ; combine high and low words of result
           174 : 8800;  -- 	RETURN
           175 : B809;  -- 	LOADI  9            ; loop 8 times (256 = 2^8)
           176 : 118B;  -- 	STORE  AtanT
           177 : 098B;  -- 	LOAD   AtanT
           178 : 6FFF;  -- 	ADDI   -1
           179 : 397C;  -- 	JPOS   A2_DN        ; not done; continue shifting
           17A : 81B7;  -- 	CALL   Div16s       ; do the standard division
           17B : 8800;  -- 	RETURN
           17C : 118B;  -- 	STORE  AtanT
           17D : 09E8;  -- 	LOAD   d16sN        ; start by trying to scale the numerator
           17E : 6001;  -- 	SHIFT  1
           17F : 59E8;  -- 	XOR    d16sN        ; if the sign changed,
           180 : 3184;  -- 	JNEG   A2_DD        ; switch to scaling the denominator
           181 : 59E8;  -- 	XOR    d16sN        ; get back shifted version
           182 : 11E8;  -- 	STORE  d16sN
           183 : 2977;  -- 	JUMP   A2_DL
           184 : 09E9;  -- 	LOAD   d16sD
           185 : 6011;  -- 	SHIFT  -1           ; have to scale denominator
           186 : 11E9;  -- 	STORE  d16sD
           187 : 2977;  -- 	JUMP   A2_DL
           188 : 0000;  -- AtanX:      DW 0
           189 : 0000;  -- AtanY:      DW 0
           18A : 0000;  -- AtanRatio:  DW 0        ; =y/x
           18B : 0000;  -- AtanT:      DW 0        ; temporary value
           18C : 0048;  -- A2c:        DW 72       ; 72/256=0.28125, with 8 fractional bits
           18D : 394C;  -- A2cd:       DW 14668    ; = 180/pi with 8 fractional bits
           18E : B800;  -- 	LOADI  0
           18F : 11B3;  -- 	STORE  m16sc        ; clear carry
           190 : 11B6;  -- 	STORE  mres16sH     ; clear result
           191 : B810;  -- 	LOADI  16           ; load 16 to counter
           192 : 11B4;  -- 	STORE  mcnt16s      
           193 : 09B3;  -- 	LOAD   m16sc        ; check the carry (from previous iteration)
           194 : 4198;  -- 	JZERO  Mult16s_noc  ; if no carry, move on
           195 : 09B6;  -- 	LOAD   mres16sH     ; if a carry, 
           196 : 19B1;  -- 	ADD    m16sA        ;  add multiplicand to result H
           197 : 11B6;  -- 	STORE  mres16sH
           198 : 09B2;  -- 	LOAD   m16sB
           199 : 4A5C;  -- 	AND    One          ; check bit 0 of multiplier
           19A : 11B3;  -- 	STORE  m16sc        ; save as next carry
           19B : 419F;  -- 	JZERO  Mult16s_sh   ; if no carry, move on to shift
           19C : 09B6;  -- 	LOAD   mres16sH     ; if bit 0 set,
           19D : 21B1;  -- 	SUB    m16sA        ;  subtract multiplicand from result H
           19E : 11B6;  -- 	STORE  mres16sH
           19F : 09B2;  -- 	LOAD   m16sB
           1A0 : 6011;  -- 	SHIFT  -1           ; shift result L >>1
           1A1 : 49B0;  -- 	AND    c7FFF        ; clear msb
           1A2 : 11B2;  -- 	STORE  m16sB
           1A3 : 09B6;  -- 	LOAD   mres16sH     ; load result H
           1A4 : 600F;  -- 	SHIFT  15           ; move lsb to msb
           1A5 : 51B2;  -- 	OR     m16sB
           1A6 : 11B2;  -- 	STORE  m16sB        ; result L now includes carry out from H
           1A7 : 09B6;  -- 	LOAD   mres16sH
           1A8 : 6011;  -- 	SHIFT  -1
           1A9 : 11B6;  -- 	STORE  mres16sH     ; shift result H >>1
           1AA : 09B4;  -- 	LOAD   mcnt16s
           1AB : 6FFF;  -- 	ADDI   -1           ; check counter
           1AC : 3992;  -- 	JPOS   Mult16s_loop ; need to iterate 16 times
           1AD : 09B2;  -- 	LOAD   m16sB
           1AE : 11B5;  -- 	STORE  mres16sL     ; multiplier and result L shared a word
           1AF : 8800;  -- 	RETURN              ; Done
           1B0 : 7FFF;  -- c7FFF: DW &H7FFF
           1B1 : 0000;  -- m16sA: DW 0 ; multiplicand
           1B2 : 0000;  -- m16sB: DW 0 ; multipler
           1B3 : 0000;  -- m16sc: DW 0 ; carry
           1B4 : 0000;  -- mcnt16s: DW 0 ; counter
           1B5 : 0000;  -- mres16sL: DW 0 ; result low
           1B6 : 0000;  -- mres16sH: DW 0 ; result high
           1B7 : B800;  -- 	LOADI  0
           1B8 : 11EF;  -- 	STORE  dres16sR     ; clear remainder result
           1B9 : 11EC;  -- 	STORE  d16sC1       ; clear carry
           1BA : 09E8;  -- 	LOAD   d16sN
           1BB : 59E9;  -- 	XOR    d16sD
           1BC : 11EA;  -- 	STORE  d16sS        ; sign determination = N XOR D
           1BD : B811;  -- 	LOADI  17
           1BE : 11EB;  -- 	STORE  d16sT        ; preload counter with 17 (16+1)
           1BF : 09E9;  -- 	LOAD   d16sD
           1C0 : 8125;  -- 	CALL   Abs          ; take absolute value of denominator
           1C1 : 11E9;  -- 	STORE  d16sD
           1C2 : 09E8;  -- 	LOAD   d16sN
           1C3 : 8125;  -- 	CALL   Abs          ; take absolute value of numerator
           1C4 : 11E8;  -- 	STORE  d16sN
           1C5 : 09E8;  -- 	LOAD   d16sN
           1C6 : 601F;  -- 	SHIFT  -15          ; get msb
           1C7 : 4A5C;  -- 	AND    One          ; only msb (because shift is arithmetic)
           1C8 : 11ED;  -- 	STORE  d16sC2       ; store as carry
           1C9 : 09E8;  -- 	LOAD   d16sN
           1CA : 6001;  -- 	SHIFT  1            ; shift <<1
           1CB : 51EC;  -- 	OR     d16sC1       ; with carry
           1CC : 11E8;  -- 	STORE  d16sN
           1CD : 09EB;  -- 	LOAD   d16sT
           1CE : 6FFF;  -- 	ADDI   -1           ; decrement counter
           1CF : 41DF;  -- 	JZERO  Div16s_sign  ; if finished looping, finalize result
           1D0 : 11EB;  -- 	STORE  d16sT
           1D1 : 09EF;  -- 	LOAD   dres16sR
           1D2 : 6001;  -- 	SHIFT  1            ; shift remainder
           1D3 : 51ED;  -- 	OR     d16sC2       ; with carry from other shift
           1D4 : 21E9;  -- 	SUB    d16sD        ; subtract denominator from remainder
           1D5 : 31DA;  -- 	JNEG   Div16s_add   ; if negative, need to add it back
           1D6 : 11EF;  -- 	STORE  dres16sR
           1D7 : B801;  -- 	LOADI  1
           1D8 : 11EC;  -- 	STORE  d16sC1       ; set carry
           1D9 : 29C5;  -- 	JUMP   Div16s_loop
           1DA : 19E9;  -- 	ADD    d16sD        ; add denominator back in
           1DB : 11EF;  -- 	STORE  dres16sR
           1DC : B800;  -- 	LOADI  0
           1DD : 11EC;  -- 	STORE  d16sC1       ; clear carry
           1DE : 29C5;  -- 	JUMP   Div16s_loop
           1DF : 09E8;  -- 	LOAD   d16sN
           1E0 : 11EE;  -- 	STORE  dres16sQ     ; numerator was used to hold quotient result
           1E1 : 09EA;  -- 	LOAD   d16sS        ; check the sign indicator
           1E2 : 31E4;  -- 	JNEG   Div16s_neg
           1E3 : 8800;  -- 	RETURN
           1E4 : 09EE;  -- 	LOAD   dres16sQ     ; need to negate the result
           1E5 : 8126;  -- 	CALL   Neg
           1E6 : 11EE;  -- 	STORE  dres16sQ
           1E7 : 8800;  -- 	RETURN	
           1E8 : 0000;  -- d16sN: DW 0 ; numerator
           1E9 : 0000;  -- d16sD: DW 0 ; denominator
           1EA : 0000;  -- d16sS: DW 0 ; sign value
           1EB : 0000;  -- d16sT: DW 0 ; temp counter
           1EC : 0000;  -- d16sC1: DW 0 ; carry value
           1ED : 0000;  -- d16sC2: DW 0 ; carry value
           1EE : 0000;  -- dres16sQ: DW 0 ; quotient result
           1EF : 0000;  -- dres16sR: DW 0 ; remainder result
           1F0 : 0A1A;  -- 	LOAD   L2X
           1F1 : 8125;  -- 	CALL   Abs
           1F2 : 121C;  -- 	STORE  L2T1
           1F3 : 0A1B;  -- 	LOAD   L2Y
           1F4 : 8125;  -- 	CALL   Abs
           1F5 : 221C;  -- 	SUB    L2T1
           1F6 : 3212;  -- 	JNEG   GDSwap    ; swap if needed to get largest value in X
           1F7 : 1A1C;  -- 	ADD    L2T1
           1F8 : 11B1;  -- 	STORE  m16sa
           1F9 : B8F6;  -- 	LOADI  246       ; max * 246
           1FA : 11B2;  -- 	STORE  m16sB
           1FB : 818E;  -- 	CALL   Mult16s
           1FC : 09B6;  -- 	LOAD   mres16sH
           1FD : 6008;  -- 	SHIFT  8
           1FE : 121D;  -- 	STORE  L2T2
           1FF : 09B5;  -- 	LOAD   mres16sL
           200 : 6018;  -- 	SHIFT  -8        ; / 256
           201 : 4A6E;  -- 	AND    LowByte
           202 : 521D;  -- 	OR     L2T2
           203 : 121E;  -- 	STORE  L2T3
           204 : 0A1C;  -- 	LOAD   L2T1
           205 : 11B1;  -- 	STORE  m16sa
           206 : B868;  -- 	LOADI  104       ; min * 104
           207 : 11B2;  -- 	STORE  m16sB
           208 : 818E;  -- 	CALL   Mult16s
           209 : 09B6;  -- 	LOAD   mres16sH
           20A : 6008;  -- 	SHIFT  8
           20B : 121D;  -- 	STORE  L2T2
           20C : 09B5;  -- 	LOAD   mres16sL
           20D : 6018;  -- 	SHIFT  -8        ; / 256
           20E : 4A6E;  -- 	AND    LowByte
           20F : 521D;  -- 	OR     L2T2
           210 : 1A1E;  -- 	ADD    L2T3     ; sum
           211 : 8800;  -- 	RETURN
           212 : 1A1C;  -- 	ADD    L2T1
           213 : 121D;  -- 	STORE  L2T2
           214 : 0A1C;  -- 	LOAD   L2T1
           215 : 121E;  -- 	STORE  L2T3
           216 : 0A1D;  -- 	LOAD   L2T2
           217 : 121C;  -- 	STORE  L2T1
           218 : 0A1E;  -- 	LOAD   L2T3
           219 : 29F8;  -- 	JUMP   CalcDist
           21A : 0000;  -- L2X:  DW 0
           21B : 0000;  -- L2Y:  DW 0
           21C : 0000;  -- L2T1: DW 0
           21D : 0000;  -- L2T2: DW 0
           21E : 0000;  -- L2T3: DW 0
           21F : 9802;  -- 	OUT    TIMER
           220 : 9002;  -- 	IN     TIMER
           221 : 9807;  -- 	OUT    XLEDS       ; User-feedback that a pause is occurring.
           222 : 6FF6;  -- 	ADDI   -10         ; 1 second at 10Hz.
           223 : 3220;  -- 	JNEG   Wloop
           224 : 8800;  -- 	RETURN
           225 : 823D;  -- 	CALL   GetBattLvl
           226 : 4225;  -- 	JZERO  BattCheck   ; A/D hasn't had time to initialize
           227 : 227E;  -- 	SUB    MinBatt
           228 : 322B;  -- 	JNEG   DeadBatt
           229 : 1A7E;  -- 	ADD    MinBatt     ; get original value back
           22A : 8800;  -- 	RETURN
           22B : B820;  -- 	LOADI  &H20
           22C : 980A;  -- 	OUT    BEEP        ; start beep sound
           22D : 823D;  -- 	CALL   GetBattLvl  ; get the battery level
           22E : 9804;  -- 	OUT    SSEG1       ; display it everywhere
           22F : 9805;  -- 	OUT    SSEG2
           230 : 9806;  -- 	OUT    LCD
           231 : 0A5B;  -- 	LOAD   Zero
           232 : 6FFF;  -- 	ADDI   -1          ; 0xFFFF
           233 : 9801;  -- 	OUT    LEDS        ; all LEDs on
           234 : 9807;  -- 	OUT    XLEDS
           235 : 821F;  -- 	CALL   Wait1       ; 1 second
           236 : B940;  -- 	LOADI  &H140       ; short, high-pitched beep
           237 : 980A;  -- 	OUT    BEEP        ; stop beeping
           238 : 0A5B;  -- 	LOAD   Zero
           239 : 9801;  -- 	OUT    LEDS        ; LEDs off
           23A : 9807;  -- 	OUT    XLEDS
           23B : 821F;  -- 	CALL   Wait1       ; 1 second
           23C : 2A2B;  -- 	JUMP   DeadBatt    ; repeat forever
           23D : 0A80;  -- 	LOAD   I2CRCmd     ; 0x0190 (write 0B, read 1B, addr 0x90)
           23E : 9890;  -- 	OUT    I2C_CMD     ; to I2C_CMD
           23F : 9892;  -- 	OUT    I2C_RDY     ; start the communication
           240 : 824B;  -- 	CALL   BlockI2C    ; wait for it to finish
           241 : 9091;  -- 	IN     I2C_DATA    ; get the returned data
           242 : 8800;  -- 	RETURN
           243 : 824B;  -- 	CALL   BlockI2C    ; wait for idle
           244 : 0A7F;  -- 	LOAD   I2CWCmd     ; 0x1190 (write 1B, read 1B, addr 0x90)
           245 : 9890;  -- 	OUT    I2C_CMD     ; to I2C_CMD register
           246 : 0A5B;  -- 	LOAD   Zero        ; 0x0000 (A/D port 0, no increment)
           247 : 9891;  -- 	OUT    I2C_DATA    ; to I2C_DATA register
           248 : 9892;  -- 	OUT    I2C_RDY     ; start the communication
           249 : 824B;  -- 	CALL   BlockI2C    ; wait for it to finish
           24A : 8800;  -- 	RETURN
           24B : 0A5B;  -- 	LOAD   Zero
           24C : 1259;  -- 	STORE  Temp        ; Used to check for timeout
           24D : 0A59;  -- 	LOAD   Temp
           24E : 6801;  -- 	ADDI   1           ; this will result in ~0.1s timeout
           24F : 1259;  -- 	STORE  Temp
           250 : 4254;  -- 	JZERO  I2CError    ; Timeout occurred; error
           251 : 9092;  -- 	IN     I2C_RDY     ; Read busy signal
           252 : 3A4D;  -- 	JPOS   BI2CL       ; If not 0, try again
           253 : 8800;  -- 	RETURN             ; Else return
           254 : 0A5B;  -- 	LOAD   Zero
           255 : 692C;  -- 	ADDI   &H12C       ; "I2C"
           256 : 9804;  -- 	OUT    SSEG1
           257 : 9805;  -- 	OUT    SSEG2       ; display error message
           258 : 2A54;  -- 	JUMP   I2CError
           259 : 0000;  -- Temp:     DW 0 ; "Temp" is not a great name, but can be useful
           25A : FFFF;  -- NegOne:   DW -1
           25B : 0000;  -- Zero:     DW 0
           25C : 0001;  -- One:      DW 1
           25D : 0002;  -- Two:      DW 2
           25E : 0003;  -- Three:    DW 3
           25F : 0004;  -- Four:     DW 4
           260 : 0005;  -- Five:     DW 5
           261 : 0006;  -- Six:      DW 6
           262 : 0007;  -- Seven:    DW 7
           263 : 0008;  -- Eight:    DW 8
           264 : 0009;  -- Nine:     DW 9
           265 : 000A;  -- Ten:      DW 10
           266 : 0001;  -- Mask0:    DW &B00000001
           267 : 0002;  -- Mask1:    DW &B00000010
           268 : 0004;  -- Mask2:    DW &B00000100
           269 : 0008;  -- Mask3:    DW &B00001000
           26A : 0010;  -- Mask4:    DW &B00010000
           26B : 0020;  -- Mask5:    DW &B00100000
           26C : 0040;  -- Mask6:    DW &B01000000
           26D : 0080;  -- Mask7:    DW &B10000000
           26E : 00FF;  -- LowByte:  DW &HFF      ; binary 00000000 1111111
           26F : 000F;  -- LowNibl:  DW &HF       ; 0000 0000 0000 1111
           270 : 03C1;  -- OneMeter: DW 961       ; ~1m in 1.04mm units
           271 : 01E1;  -- HalfMeter: DW 481      ; ~0.5m in 1.04mm units
           272 : 024A;  -- TwoFeet:  DW 586       ; ~2ft in 1.04mm units
           273 : 0125;  -- OneFoot:  DW 293       ; ~2ft in 1.04mm units
           274 : 005A;  -- Deg90:    DW 90        ; 90 degrees in odometer units
           275 : 00B4;  -- Deg180:   DW 180       ; 180
           276 : 010E;  -- Deg270:   DW 270       ; 270
           277 : 0168;  -- Deg360:   DW 360       ; can never actually happen; for math only
           278 : 0064;  -- FSlow:    DW 100       ; 100 is about the lowest velocity value that will move
           279 : FF9C;  -- RSlow:    DW -100
           27A : 015E;  -- FMid:     DW 350       ; 350 is a medium speed
           27B : FEA2;  -- RMid:     DW -350
           27C : 01F4;  -- FFast:    DW 500       ; 500 is almost max speed (511 is max)
           27D : FE0C;  -- RFast:    DW -500
           27E : 008C;  -- MinBatt:  DW 140       ; 14.0V - minimum safe battery voltage
           27F : 1190;  -- I2CWCmd:  DW &H1190    ; write one i2c byte, read one byte, addr 0x90
           280 : 0190;  -- I2CRCmd:  DW &H0190    ; write nothing, read one byte, addr 0x90
  END;
