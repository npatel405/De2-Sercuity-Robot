-- Altera Memory Initialization File (MIF)

DEPTH = 2048;
WIDTH = 16;

ADDRESS_RADIX = HEX;
DATA_RADIX = HEX;

CONTENT
  BEGIN
    [000..7FF] : 0000;  -- Default to NOP

           000 : 2805;  -- 	JUMP   Init        ; Reset vector
           001 : B000;  -- 	RETI               ; Sonar interrupt (unused)
           002 : 291C;  -- 	JUMP   CTimer_ISR  ; Timer interrupt
           003 : B000;  -- 	RETI               ; UART interrupt (unused)
           004 : B000;  -- 	RETI               ; Motor stall interrupt (unused)
           005 : 0A9D;  -- 	LOAD   Zero
           006 : 9883;  -- 	OUT    LVELCMD     ; Stop motors
           007 : 988B;  -- 	OUT    RVELCMD
           008 : 111F;  -- 	STORE  DVel        ; Reset movement API variables
           009 : 111E;  -- 	STORE  DTheta
           00A : 98B2;  -- 	OUT    SONAREN     ; Disable sonar (optional)
           00B : 980A;  -- 	OUT    BEEP        ; Stop any beeping (optional)
           00C : 8285;  -- 	CALL   SetupI2C    ; Configure the I2C to read the battery voltage
           00D : 8267;  -- 	CALL   BattCheck   ; Get battery voltage (and end if too low).
           00E : 9806;  -- 	OUT    LCD         ; Display battery voltage (hex, tenths of volts)
           00F : B930;  -- 	LOADI  &H130
           010 : 980A;  -- 	OUT    BEEP        ; Short hello beep
           011 : 9003;  -- 	IN     XIO         ; XIO contains SAFETY signal
           012 : 4AAC;  -- 	AND    Mask4       ; SAFETY signal is bit 4
           013 : 3819;  -- 	JPOS   WaitForUser ; If ready, jump to wait for PB3
           014 : 9002;  -- 	IN     TIMER       ; Use the timer value to
           015 : 4AA9;  -- 	AND    Mask1       ; blink LED17 as a reminder to toggle SW17
           016 : 6008;  -- 	SHIFT  8           ; Shift over to LED17
           017 : 9807;  -- 	OUT    XLEDS       ; LED17 blinks at 2.5Hz (10Hz/4)
           018 : 2811;  -- 	JUMP   WaitForSafety
           019 : 9002;  -- 	IN     TIMER       ; Used to blink the LEDs above PB3
           01A : 4AA9;  -- 	AND    Mask1
           01B : 6005;  -- 	SHIFT  5           ; Both LEDG6 and LEDG7
           01C : 129B;  -- 	STORE  Temp        ; (overkill, but looks nice)
           01D : 6001;  -- 	SHIFT  1
           01E : 529B;  -- 	OR     Temp
           01F : 9807;  -- 	OUT    XLEDS
           020 : 9003;  -- 	IN     XIO         ; XIO contains KEYs
           021 : 4AAA;  -- 	AND    Mask2       ; KEY3 mask (KEY0 is reset and can't be read)
           022 : 3819;  -- 	JPOS   WaitForUser ; not ready (KEYs are active-low, hence JPOS)
           023 : 0A9D;  -- 	LOAD   Zero
           024 : 9807;  -- 	OUT    XLEDS       ; clear LEDs once ready to continue
           025 : 98C3;  -- 	OUT    RESETPOS    ; reset odometer in case wheels moved after programming
           026 : B80A;  -- 	LOADI  10          ; fire at 10 Hz (10 ms * 10).
           027 : 980C;  -- 	OUT    CTIMER      ; turn on timer peripheral
           028 : A802;  -- 	SEI    &B0010      ; enable interrupts from source 2 (timer)
           029 : 802B;  -- 	CALL	MAIN_STATE_MACHINE_LOOP
           02A : 80BB;  -- 	CALL	moveDeciseconds
           02B : 08D6;  -- 	LOAD 	CURRENT_STATE
           02C : 20D9;  -- 	SUB		NUM_STATE_START
           02D : 4052;  -- 	JZERO	CALL_STATE_START
           02E : 08D6;  -- 	LOAD	CURRENT_STATE
           02F : 20DA;  -- 	SUB		NUM_STATE_NW_CCW
           030 : 4054;  -- 	JZERO	CALL_STATE_NW_CCW
           031 : 08D6;  -- 	LOAD	CURRENT_STATE
           032 : 20DB;  -- 	SUB		NUM_STATE_SW_CCW
           033 : 4056;  -- 	JZERO	CALL_STATE_SW_CCW
           034 : 08D6;  -- 	LOAD	CURRENT_STATE
           035 : 20DC;  -- 	SUB		NUM_STATE_S_CCW
           036 : 4058;  -- 	JZERO	CALL_STATE_S_CCW
           037 : 08D6;  -- 	LOAD	CURRENT_STATE
           038 : 20DD;  -- 	SUB		NUM_STATE_SE_CCW
           039 : 405A;  -- 	JZERO	CALL_STATE_SE_CCW
           03A : 08D6;  -- 	LOAD	CURRENT_STATE
           03B : 20DE;  -- 	SUB		NUM_STATE_E_CCW
           03C : 405C;  -- 	JZERO	CALL_STATE_E_CCW
           03D : 08D6;  -- 	LOAD	CURRENT_STATE
           03E : 20DF;  -- 	SUB		NUM_STATE_NE_CCW
           03F : 405E;  -- 	JZERO	CALL_STATE_NE_CCW
           040 : 08D6;  -- 	LOAD	CURRENT_STATE
           041 : 20E0;  -- 	SUB		NUM_STATE_NE_CW
           042 : 4060;  -- 	JZERO	CALL_STATE_NE_CW
           043 : 08D6;  -- 	LOAD	CURRENT_STATE
           044 : 20E1;  -- 	SUB		NUM_STATE_E_CW
           045 : 4062;  -- 	JZERO	CALL_STATE_E_CW
           046 : 08D6;  -- 	LOAD	CURRENT_STATE
           047 : 20E2;  -- 	SUB		NUM_STATE_SE_CW
           048 : 4064;  -- 	JZERO	CALL_STATE_SE_CW
           049 : 08D6;  -- 	LOAD	CURRENT_STATE
           04A : 20E3;  -- 	SUB		NUM_STATE_S_CW
           04B : 4066;  -- 	JZERO	CALL_STATE_S_CW
           04C : 08D6;  -- 	LOAD	CURRENT_STATE
           04D : 20E4;  -- 	SUB		NUM_STATE_SW_CW
           04E : 4068;  -- 	JZERO	CALL_STATE_SW_CW
           04F : 08D6;  -- 	LOAD	CURRENT_STATE
           050 : 20E5;  -- 	SUB		NUM_STATE_NW_CW
           051 : 406A;  -- 	JZERO	CALL_STATE_NW_CW
           052 : 806C;  -- 	CALL 	EXE_STATE_START
           053 : 282B;  -- 	JUMP 	MAIN_STATE_MACHINE_LOOP
           054 : 8072;  -- 	CALL 	EXE_STATE_NW_CCW
           055 : 282B;  -- 	JUMP 	MAIN_STATE_MACHINE_LOOP
           056 : 8078;  -- 	CALL 	EXE_STATE_SW_CCW
           057 : 282B;  -- 	JUMP 	MAIN_STATE_MACHINE_LOOP
           058 : 807F;  -- 	CALL 	EXE_STATE_S_CCW
           059 : 282B;  -- 	JUMP 	MAIN_STATE_MACHINE_LOOP
           05A : 8085;  -- 	CALL 	EXE_STATE_SE_CCW
           05B : 282B;  -- 	JUMP 	MAIN_STATE_MACHINE_LOOP
           05C : 808B;  -- 	CALL 	EXE_STATE_E_CCW
           05D : 282B;  -- 	JUMP 	MAIN_STATE_MACHINE_LOOP
           05E : 8091;  -- 	CALL 	EXE_STATE_NE_CCW
           05F : 282B;  -- 	JUMP 	MAIN_STATE_MACHINE_LOOP
           060 : 8097;  -- 	CALL 	EXE_STATE_NE_CW
           061 : 282B;  -- 	JUMP 	MAIN_STATE_MACHINE_LOOP
           062 : 809D;  -- 	CALL 	EXE_STATE_E_CW
           063 : 282B;  -- 	JUMP 	MAIN_STATE_MACHINE_LOOP
           064 : 80A3;  -- 	CALL 	EXE_STATE_SE_CW
           065 : 282B;  -- 	JUMP 	MAIN_STATE_MACHINE_LOOP
           066 : 80A9;  -- 	CALL 	EXE_STATE_S_CW
           067 : 282B;  -- 	JUMP 	MAIN_STATE_MACHINE_LOOP
           068 : 80AF;  -- 	CALL 	EXE_STATE_SW_CW
           069 : 282B;  -- 	JUMP 	MAIN_STATE_MACHINE_LOOP
           06A : 80B5;  -- 	CALL 	EXE_STATE_NW_CW
           06B : 282B;  -- 	JUMP 	MAIN_STATE_MACHINE_LOOP
           06C : 08D6;  -- 	LOAD 	CURRENT_STATE
           06D : 9804;  -- 	OUT 	SSEG1
           06E : 08DA;  -- 	LOAD	NUM_STATE_NW_CCW   ;;	Currently transitioning unconditionally
           06F : 10D6;  -- 	STORE	CURRENT_STATE	
           070 : 8261;  -- 	CALL 	Wait1
           071 : 8800;  -- 	RETURN
           072 : 08D6;  -- 	LOAD CURRENT_STATE
           073 : 9804;  -- 	OUT SSEG1
           074 : 08DB;  -- 	LOAD	NUM_STATE_SW_CCW   ;;THIS IS HOW YOU TRANSITION STATES
           075 : 10D6;  -- 	STORE	CURRENT_STATE	
           076 : 8261;  -- 	CALL Wait1
           077 : 8800;  -- 	RETURN
           078 : 08D6;  -- 	LOAD CURRENT_STATE
           079 : 9804;  -- 	OUT SSEG1
           07A : 80D2;  -- 	CALL turnRight
           07B : 08DC;  -- 	LOAD	NUM_STATE_S_CCW   ;;THIS IS HOW YOU TRANSITION STATES
           07C : 10D6;  -- 	STORE	CURRENT_STATE	
           07D : 8261;  -- 	CALL Wait1
           07E : 8800;  -- 	RETURN
           07F : 08D6;  -- 	LOAD CURRENT_STATE
           080 : 9804;  -- 	OUT SSEG1
           081 : 08DD;  -- 	LOAD	NUM_STATE_SE_CCW   ;;THIS IS HOW YOU TRANSITION STATES
           082 : 10D6;  -- 	STORE	CURRENT_STATE	
           083 : 8261;  -- 	CALL Wait1
           084 : 8800;  -- 	RETURN
           085 : 08D6;  -- 	LOAD CURRENT_STATE
           086 : 9804;  -- 	OUT SSEG1
           087 : 08DE;  -- 	LOAD	NUM_STATE_E_CCW   ;;THIS IS HOW YOU TRANSITION STATES
           088 : 10D6;  -- 	STORE	CURRENT_STATE	
           089 : 8261;  -- 	CALL Wait1
           08A : 8800;  -- 	RETURN
           08B : 08D6;  -- 	LOAD CURRENT_STATE
           08C : 9804;  -- 	OUT SSEG1
           08D : 08DF;  -- 	LOAD	NUM_STATE_NE_CCW   ;;THIS IS HOW YOU TRANSITION STATES
           08E : 10D6;  -- 	STORE	CURRENT_STATE	
           08F : 8261;  -- 	CALL Wait1
           090 : 8800;  -- 	RETURN
           091 : 08D6;  -- 	LOAD CURRENT_STATE
           092 : 9804;  -- 	OUT SSEG1
           093 : 08E0;  -- 	LOAD	NUM_STATE_NE_CW   ;;THIS IS HOW YOU TRANSITION STATES
           094 : 10D6;  -- 	STORE	CURRENT_STATE	
           095 : 8261;  -- 	CALL Wait1
           096 : 8800;  -- 	RETURN
           097 : 08D6;  -- 	LOAD CURRENT_STATE
           098 : 9804;  -- 	OUT SSEG1
           099 : 08E1;  -- 	LOAD	NUM_STATE_E_CW   ;;THIS IS HOW YOU TRANSITION STATES
           09A : 10D6;  -- 	STORE	CURRENT_STATE	
           09B : 8261;  -- 	CALL Wait1
           09C : 8800;  -- 	RETURN
           09D : 08D6;  -- 	LOAD CURRENT_STATE
           09E : 9804;  -- 	OUT SSEG1
           09F : 08E2;  -- 	LOAD	NUM_STATE_SE_CW   ;;THIS IS HOW YOU TRANSITION STATES
           0A0 : 10D6;  -- 	STORE	CURRENT_STATE
           0A1 : 8261;  -- 	CALL Wait1
           0A2 : 8800;  -- 	RETURN
           0A3 : 08D6;  -- 	LOAD CURRENT_STATE
           0A4 : 9804;  -- 	OUT SSEG1
           0A5 : 08E3;  -- 	LOAD	NUM_STATE_S_CW   ;;THIS IS HOW YOU TRANSITION STATES
           0A6 : 10D6;  -- 	STORE	CURRENT_STATE	
           0A7 : 8261;  -- 	CALL Wait1
           0A8 : 8800;  -- 	RETURN
           0A9 : 08D6;  -- 	LOAD CURRENT_STATE
           0AA : 9804;  -- 	OUT SSEG1
           0AB : 08E4;  -- 	LOAD	NUM_STATE_SW_CW   ;;THIS IS HOW YOU TRANSITION STATES
           0AC : 10D6;  -- 	STORE	CURRENT_STATE	
           0AD : 8261;  -- 	CALL Wait1
           0AE : 8800;  -- 	RETURN
           0AF : 08D6;  -- 	LOAD CURRENT_STATE
           0B0 : 9804;  -- 	OUT SSEG1
           0B1 : 08E5;  -- 	LOAD	NUM_STATE_NW_CW   ;;THIS IS HOW YOU TRANSITION STATES
           0B2 : 10D6;  -- 	STORE	CURRENT_STATE	
           0B3 : 8261;  -- 	CALL Wait1
           0B4 : 8800;  -- 	RETURN
           0B5 : 08D6;  -- 	LOAD CURRENT_STATE
           0B6 : 9804;  -- 	OUT SSEG1
           0B7 : 08E4;  -- 	LOAD	NUM_STATE_SW_CW   ;;THIS IS HOW YOU TRANSITION STATES
           0B8 : 10D6;  -- 	STORE	CURRENT_STATE
           0B9 : 8261;  -- 	CALL Wait1
           0BA : 8800;  -- 	RETURN
           0BB : 9802;  -- 	OUT		TIMER												;;Reset the timer
           0BC : 0AA2;  -- 	LOAD	FIVE
           0BD : 10D8;  -- 	STORE	moveDeciseconds_local_motorRefresh					;;Store 5 as the first refresh time
           0BE : 0ABC;  -- 	LOAD	fMid	
           0BF : 111F;  -- 	STORE	dVel												;;Start moving
           0C0 : 9002;  -- 		IN		TIMER											;;Get the timer
           0C1 : 20D7;  -- 		SUB		moveDeciseconds_parameter_decisecondsToMove
           0C2 : 38CD;  -- 		JPOS	moveDeciseconds_exit							;;Check to see if we are done moving
           0C3 : 9002;  -- 		IN		TIMER
           0C4 : 20D8;  -- 		SUB		moveDeciseconds_local_motorRefresh				;;Check if we need to refresh the motors
           0C5 : 38C7;  -- 		JPOS	moveDeciseconds_refresh
           0C6 : 28C0;  -- 		JUMP	moveDeciseconds_main	
           0C7 : 08D8;  -- 		LOAD	moveDeciseconds_local_motorRefresh
           0C8 : 6805;  -- 		ADDI	5
           0C9 : 10D8;  -- 		STORE	moveDeciseconds_local_motorRefresh
           0CA : 0ABC;  -- 		LOAD	fMid
           0CB : 111F;  -- 		STORE	dVel											;;Move the robot at fMid
           0CC : 28C0;  -- 		JUMP	moveDeciseconds_main
           0CD : 8800;  -- 		RETURN
           0CE : B800;  -- 	LOADI  0
           0CF : 111F;  -- 	STORE  DVel
           0D0 : B85A;  -- 	LOADI  90
           0D1 : 111E;  -- 	STORE  DTheta	
           0D2 : B800;  -- 	LOADI  0
           0D3 : 111F;  -- 	STORE  DVel
           0D4 : BFA6;  -- 	LOADI  -90
           0D5 : 111E;  -- 	STORE  DTheta
           0D6 : 0000;  -- CURRENT_STATE:	DW 0
           0D7 : 0000;  -- moveDeciseconds_parameter_decisecondsToMove:	DW	0
           0D8 : 0000;  -- moveDeciseconds_local_motorRefresh:				DW  0
           0D9 : 0000;  -- NUM_STATE_START:	DW 0
           0DA : 0001;  -- NUM_STATE_NW_CCW:	DW 1
           0DB : 0002;  -- NUM_STATE_SW_CCW:	DW 2
           0DC : 0003;  -- NUM_STATE_S_CCW:	DW 3
           0DD : 0004;  -- NUM_STATE_SE_CCW:	DW 4
           0DE : 0005;  -- NUM_STATE_E_CCW:	DW 5
           0DF : 0006;  -- NUM_STATE_NE_CCW:	DW 6
           0E0 : 0007;  -- NUM_STATE_NE_CW:	DW 7
           0E1 : 0008;  -- NUM_STATE_E_CW:		DW 8
           0E2 : 0009;  -- NUM_STATE_SE_CW:	DW 9
           0E3 : 000A;  -- NUM_STATE_S_CW:		DW 10
           0E4 : 000B;  -- NUM_STATE_SW_CW:	DW 11
           0E5 : 000C;  -- NUM_STATE_NW_CW:	DW 12
           0E6 : B800;  -- 	LOADI  0
           0E7 : 111E;  -- 	STORE  DTheta      ; Desired angle 0
           0E8 : 0ABC;  -- 	LOAD   FMid        ; Defined below as 350.
           0E9 : 111F;  -- 	STORE  DVel        ; Desired forward velocity
           0EA : 90C0;  -- 	IN     XPOS        ; X position from odometry
           0EB : 9806;  -- 	OUT    LCD         ; Display X position for debugging
           0EC : 22B2;  -- 	SUB    OneMeter    ; Defined below as the robot units for 1 m
           0ED : 30EA;  -- 	JNEG   Test1       ; Not there yet, keep checking
           0EE : B800;  -- 	LOADI  0
           0EF : 111F;  -- 	STORE  DVel
           0F0 : B85A;  -- 	LOADI  90
           0F1 : 111E;  -- 	STORE  DTheta
           0F2 : 814D;  -- 	CALL   GetThetaErr ; get the heading error
           0F3 : 8167;  -- 	CALL   Abs         ; absolute value subroutine
           0F4 : 9806;  -- 	OUT    LCD         ; Display |angle error| for debugging
           0F5 : 6FFB;  -- 	ADDI   -5          ; check if within 5 degrees of target angle
           0F6 : 38F2;  -- 	JPOS   Test2       ; if not, keep testing
           0F7 : 0ABA;  -- 	LOAD   FSlow       ; defined below as 100
           0F8 : 111F;  -- 	STORE  DVel
           0F9 : 90C1;  -- 	IN     YPOS        ; get the Y position from odometry
           0FA : 22B2;  -- 	SUB    OneMeter
           0FB : 9806;  -- 	OUT    LCD         ; Display distance error for debugging
           0FC : 30F9;  -- 	JNEG   Test3       ; if not there, keep testing
           0FD : 0ABE;  -- 	LOAD   FFast       ; defined below as 500
           0FE : 111F;  -- 	STORE  DVel
           0FF : 90C0;  -- 	IN     XPOS        ; get the X position from odometry
           100 : 8168;  -- 	CALL   Neg         ; negate
           101 : 11CA;  -- 	STORE  AtanX
           102 : 90C1;  -- 	IN     YPOS        ; get the X position from odometry
           103 : 8168;  -- 	CALL   Neg         ; negate
           104 : 11CB;  -- 	STORE  AtanY
           105 : 816B;  -- 	CALL   Atan2       ; Gets the angle from (0,0) to (AtanX,AtanY)
           106 : 111E;  -- 	STORE  DTheta
           107 : 9804;  -- 	OUT    SSEG1       ; Display angle for debugging
           108 : 90C0;  -- 	IN     XPOS
           109 : 125C;  -- 	STORE  L2X
           10A : 90C1;  -- 	IN     YPOS
           10B : 125D;  -- 	STORE  L2Y
           10C : 8232;  -- 	CALL   L2Estimate
           10D : 9805;  -- 	OUT    SSEG2       ; Display distance for debugging
           10E : 22B5;  -- 	SUB    OneFoot
           10F : 38FF;  -- 	JPOS   GoTo00      ; If >1 ft from destination, continue
           110 : B800;  -- 	LOADI  0
           111 : 111F;  -- 	STORE  DVel
           112 : 2913;  -- 	JUMP   Die
           113 : A00F;  -- 	CLI    &B1111      ; disable all interrupts
           114 : 0A9D;  -- 	LOAD   Zero        ; Stop everything.
           115 : 9883;  -- 	OUT    LVELCMD
           116 : 988B;  -- 	OUT    RVELCMD
           117 : 98B2;  -- 	OUT    SONAREN
           118 : 091B;  -- 	LOAD   DEAD        ; An indication that we are dead
           119 : 9805;  -- 	OUT    SSEG2       ; "dEAd" on the sseg
           11A : 291A;  -- 	JUMP   Forever     ; Do this forever.
           11B : DEAD;  -- 	DEAD:  DW &HDEAD   ; Example of a "local" variable
           11C : 8120;  -- 	CALL   ControlMovement
           11D : B000;  -- 	RETI   ; return from ISR
           11E : 0000;  -- DTheta:    DW 0
           11F : 0000;  -- DVel:      DW 0
           120 : B832;  -- 	LOADI  50          ; used for the CapValue subroutine
           121 : 1160;  -- 	STORE  MaxVal
           122 : 814D;  -- 	CALL   GetThetaErr ; get the heading error
           123 : 6002;  -- 	SHIFT  2
           124 : 114A;  -- 	STORE  CMAErr      ; hold temporarily
           125 : 6002;  -- 	SHIFT  2           ; multiply by another 4
           126 : 8154;  -- 	CALL   CapValue    ; get a +/- max of 50
           127 : 194A;  -- 	ADD    CMAErr
           128 : 114A;  -- 	STORE  CMAErr      ; now contains a desired differential
           129 : B9FE;  -- 	LOADI  510
           12A : 1160;  -- 	STORE  MaxVal
           12B : 091F;  -- 	LOAD   DVel
           12C : 8154;  -- 	CALL   CapValue    ; ensure velocity is valid
           12D : 111F;  -- 	STORE  DVel        ; overwrite any invalid input
           12E : 194A;  -- 	ADD    CMAErr
           12F : 8154;  -- 	CALL   CapValue    ; ensure velocity is valid
           130 : 114C;  -- 	STORE  CMAR
           131 : 094A;  -- 	LOAD   CMAErr
           132 : 8168;  -- 	CALL   Neg         ; left wheel gets negative differential
           133 : 191F;  -- 	ADD    DVel
           134 : 8154;  -- 	CALL   CapValue
           135 : 114B;  -- 	STORE  CMAL
           136 : 094A;  -- 	LOAD   CMAErr
           137 : 6001;  -- 	SHIFT  1           ; double the differential
           138 : 114A;  -- 	STORE  CMAErr
           139 : 094C;  -- 	LOAD   CMAR
           13A : 214B;  -- 	SUB    CMAL        ; calculate the actual differential
           13B : 214A;  -- 	SUB    CMAErr      ; should be 0 if nothing got capped
           13C : 4145;  -- 	JZERO  CMADone
           13D : 114A;  -- 	STORE  CMAErr      ; the missing part
           13E : 194B;  -- 	ADD    CMAL
           13F : 8154;  -- 	CALL   CapValue
           140 : 114B;  -- 	STORE  CMAL
           141 : 094C;  -- 	LOAD   CMAR
           142 : 214A;  -- 	SUB    CMAErr
           143 : 8154;  -- 	CALL   CapValue
           144 : 114C;  -- 	STORE  CMAR
           145 : 094B;  -- 	LOAD   CMAL
           146 : 9883;  -- 	OUT    LVELCMD
           147 : 094C;  -- 	LOAD   CMAR
           148 : 988B;  -- 	OUT    RVELCMD
           149 : 8800;  -- 	RETURN
           14A : 0000;  -- 	CMAErr: DW 0       ; holds angle error velocity
           14B : 0000;  -- 	CMAL:    DW 0      ; holds temp left velocity
           14C : 0000;  -- 	CMAR:    DW 0      ; holds temp right velocity
           14D : 90C2;  -- 	IN     THETA
           14E : 211E;  -- 	SUB    DTheta      ; actual - desired angle
           14F : 8168;  -- 	CALL   Neg         ; desired - actual angle
           150 : 68B4;  -- 	ADDI   180
           151 : 8161;  -- 	CALL   Mod360
           152 : 6F4C;  -- 	ADDI   -180
           153 : 8800;  -- 	RETURN
           154 : 2160;  -- 	SUB     MaxVal
           155 : 395B;  -- 	JPOS    CapVelHigh
           156 : 1960;  -- 	ADD     MaxVal
           157 : 1960;  -- 	ADD     MaxVal
           158 : 315D;  -- 	JNEG    CapVelLow
           159 : 2160;  -- 	SUB     MaxVal
           15A : 8800;  -- 	RETURN
           15B : 0960;  -- 	LOAD    MaxVal
           15C : 8800;  -- 	RETURN
           15D : 0960;  -- 	LOAD    MaxVal
           15E : 8168;  -- 	CALL    Neg
           15F : 8800;  -- 	RETURN
           160 : 01FE;  -- 	MaxVal: DW 510
           161 : 3164;  -- 	JNEG   M360N
           162 : 6E98;  -- 	ADDI   -360
           163 : 2961;  -- 	JUMP   Mod360
           164 : 6968;  -- 	ADDI   360
           165 : 3164;  -- 	JNEG   M360N
           166 : 8800;  -- 	RETURN
           167 : 396A;  -- 	JPOS   Abs_r
           168 : 5A9C;  -- 	XOR    NegOne       ; Flip all bits
           169 : 6801;  -- 	ADDI   1            ; Add one (i.e. negate number)
           16A : 8800;  -- 	RETURN
           16B : 09CB;  -- 	LOAD   AtanY
           16C : 8167;  -- 	CALL   Abs          ; abs(y)
           16D : 11CD;  -- 	STORE  AtanT
           16E : 09CA;  -- 	LOAD   AtanX        ; abs(x)
           16F : 8167;  -- 	CALL   Abs
           170 : 21CD;  -- 	SUB    AtanT        ; abs(x) - abs(y)
           171 : 317C;  -- 	JNEG   A2_sw        ; if abs(y) > abs(x), switch arguments.
           172 : 09CA;  -- 	LOAD   AtanX        ; Octants 1, 4, 5, 8
           173 : 3179;  -- 	JNEG   A2_R3
           174 : 818B;  -- 	CALL   A2_calc      ; Octants 1, 8
           175 : 3177;  -- 	JNEG   A2_R1n
           176 : 8800;  -- 	RETURN              ; Return raw value if in octant 1
           177 : 6968;  -- 	ADDI   360          ; Add 360 if we are in octant 8
           178 : 8800;  -- 	RETURN
           179 : 818B;  -- 	CALL   A2_calc      ; Octants 4, 5            
           17A : 68B4;  -- 	ADDI   180          ; theta' = theta + 180
           17B : 8800;  -- 	RETURN
           17C : 09CB;  -- 	LOAD   AtanY        ; Swap input arguments
           17D : 11CD;  -- 	STORE  AtanT
           17E : 09CA;  -- 	LOAD   AtanX
           17F : 11CB;  -- 	STORE  AtanY
           180 : 09CD;  -- 	LOAD   AtanT
           181 : 11CA;  -- 	STORE  AtanX
           182 : 3987;  -- 	JPOS   A2_R2        ; If Y positive, octants 2,3
           183 : 818B;  -- 	CALL   A2_calc      ; else octants 6, 7
           184 : 8168;  -- 	CALL   Neg          ; Negatge the number
           185 : 690E;  -- 	ADDI   270          ; theta' = 270 - theta
           186 : 8800;  -- 	RETURN
           187 : 818B;  -- 	CALL   A2_calc      ; Octants 2, 3
           188 : 8168;  -- 	CALL   Neg          ; negate the angle
           189 : 685A;  -- 	ADDI   90           ; theta' = 90 - theta
           18A : 8800;  -- 	RETURN
           18B : 09CB;  -- 	LOAD   AtanY
           18C : 122A;  -- 	STORE  d16sN        ; Y in numerator
           18D : 09CA;  -- 	LOAD   AtanX
           18E : 122B;  -- 	STORE  d16sD        ; X in denominator
           18F : 81B7;  -- 	CALL   A2_div       ; divide
           190 : 0A30;  -- 	LOAD   dres16sQ     ; get the quotient (remainder ignored)
           191 : 11CC;  -- 	STORE  AtanRatio
           192 : 11F3;  -- 	STORE  m16sA
           193 : 11F4;  -- 	STORE  m16sB
           194 : 81AE;  -- 	CALL   A2_mult      ; X^2
           195 : 11F3;  -- 	STORE  m16sA
           196 : 09CE;  -- 	LOAD   A2c
           197 : 11F4;  -- 	STORE  m16sB
           198 : 81AE;  -- 	CALL   A2_mult
           199 : 6900;  -- 	ADDI   256          ; 256/256+0.28125X^2
           19A : 122B;  -- 	STORE  d16sD
           19B : 09CC;  -- 	LOAD   AtanRatio
           19C : 122A;  -- 	STORE  d16sN        ; Ratio in numerator
           19D : 81B7;  -- 	CALL   A2_div       ; divide
           19E : 0A30;  -- 	LOAD   dres16sQ     ; get the quotient (remainder ignored)
           19F : 11F3;  -- 	STORE  m16sA        ; <= result in radians
           1A0 : 09CF;  -- 	LOAD   A2cd         ; degree conversion factor
           1A1 : 11F4;  -- 	STORE  m16sB
           1A2 : 81AE;  -- 	CALL   A2_mult      ; convert to degrees
           1A3 : 11CD;  -- 	STORE  AtanT
           1A4 : 6017;  -- 	SHIFT  -7           ; check 7th bit
           1A5 : 4A9E;  -- 	AND    One
           1A6 : 41AB;  -- 	JZERO  A2_rdwn      ; round down
           1A7 : 09CD;  -- 	LOAD   AtanT
           1A8 : 6018;  -- 	SHIFT  -8
           1A9 : 6801;  -- 	ADDI   1            ; round up
           1AA : 8800;  -- 	RETURN
           1AB : 09CD;  -- 	LOAD   AtanT
           1AC : 6018;  -- 	SHIFT  -8           ; round down
           1AD : 8800;  -- 	RETURN
           1AE : 81D0;  -- 	CALL   Mult16s
           1AF : 09F8;  -- 	LOAD   mres16sH
           1B0 : 6008;  -- 	SHIFT  8            ; move high word of result up 8 bits
           1B1 : 11F8;  -- 	STORE  mres16sH
           1B2 : 09F7;  -- 	LOAD   mres16sL
           1B3 : 6018;  -- 	SHIFT  -8           ; move low word of result down 8 bits
           1B4 : 4AB0;  -- 	AND    LowByte
           1B5 : 51F8;  -- 	OR     mres16sH     ; combine high and low words of result
           1B6 : 8800;  -- 	RETURN
           1B7 : B809;  -- 	LOADI  9            ; loop 8 times (256 = 2^8)
           1B8 : 11CD;  -- 	STORE  AtanT
           1B9 : 09CD;  -- 	LOAD   AtanT
           1BA : 6FFF;  -- 	ADDI   -1
           1BB : 39BE;  -- 	JPOS   A2_DN        ; not done; continue shifting
           1BC : 81F9;  -- 	CALL   Div16s       ; do the standard division
           1BD : 8800;  -- 	RETURN
           1BE : 11CD;  -- 	STORE  AtanT
           1BF : 0A2A;  -- 	LOAD   d16sN        ; start by trying to scale the numerator
           1C0 : 6001;  -- 	SHIFT  1
           1C1 : 5A2A;  -- 	XOR    d16sN        ; if the sign changed,
           1C2 : 31C6;  -- 	JNEG   A2_DD        ; switch to scaling the denominator
           1C3 : 5A2A;  -- 	XOR    d16sN        ; get back shifted version
           1C4 : 122A;  -- 	STORE  d16sN
           1C5 : 29B9;  -- 	JUMP   A2_DL
           1C6 : 0A2B;  -- 	LOAD   d16sD
           1C7 : 6011;  -- 	SHIFT  -1           ; have to scale denominator
           1C8 : 122B;  -- 	STORE  d16sD
           1C9 : 29B9;  -- 	JUMP   A2_DL
           1CA : 0000;  -- AtanX:      DW 0
           1CB : 0000;  -- AtanY:      DW 0
           1CC : 0000;  -- AtanRatio:  DW 0        ; =y/x
           1CD : 0000;  -- AtanT:      DW 0        ; temporary value
           1CE : 0048;  -- A2c:        DW 72       ; 72/256=0.28125, with 8 fractional bits
           1CF : 394C;  -- A2cd:       DW 14668    ; = 180/pi with 8 fractional bits
           1D0 : B800;  -- 	LOADI  0
           1D1 : 11F5;  -- 	STORE  m16sc        ; clear carry
           1D2 : 11F8;  -- 	STORE  mres16sH     ; clear result
           1D3 : B810;  -- 	LOADI  16           ; load 16 to counter
           1D4 : 11F6;  -- 	STORE  mcnt16s      
           1D5 : 09F5;  -- 	LOAD   m16sc        ; check the carry (from previous iteration)
           1D6 : 41DA;  -- 	JZERO  Mult16s_noc  ; if no carry, move on
           1D7 : 09F8;  -- 	LOAD   mres16sH     ; if a carry, 
           1D8 : 19F3;  -- 	ADD    m16sA        ;  add multiplicand to result H
           1D9 : 11F8;  -- 	STORE  mres16sH
           1DA : 09F4;  -- 	LOAD   m16sB
           1DB : 4A9E;  -- 	AND    One          ; check bit 0 of multiplier
           1DC : 11F5;  -- 	STORE  m16sc        ; save as next carry
           1DD : 41E1;  -- 	JZERO  Mult16s_sh   ; if no carry, move on to shift
           1DE : 09F8;  -- 	LOAD   mres16sH     ; if bit 0 set,
           1DF : 21F3;  -- 	SUB    m16sA        ;  subtract multiplicand from result H
           1E0 : 11F8;  -- 	STORE  mres16sH
           1E1 : 09F4;  -- 	LOAD   m16sB
           1E2 : 6011;  -- 	SHIFT  -1           ; shift result L >>1
           1E3 : 49F2;  -- 	AND    c7FFF        ; clear msb
           1E4 : 11F4;  -- 	STORE  m16sB
           1E5 : 09F8;  -- 	LOAD   mres16sH     ; load result H
           1E6 : 600F;  -- 	SHIFT  15           ; move lsb to msb
           1E7 : 51F4;  -- 	OR     m16sB
           1E8 : 11F4;  -- 	STORE  m16sB        ; result L now includes carry out from H
           1E9 : 09F8;  -- 	LOAD   mres16sH
           1EA : 6011;  -- 	SHIFT  -1
           1EB : 11F8;  -- 	STORE  mres16sH     ; shift result H >>1
           1EC : 09F6;  -- 	LOAD   mcnt16s
           1ED : 6FFF;  -- 	ADDI   -1           ; check counter
           1EE : 39D4;  -- 	JPOS   Mult16s_loop ; need to iterate 16 times
           1EF : 09F4;  -- 	LOAD   m16sB
           1F0 : 11F7;  -- 	STORE  mres16sL     ; multiplier and result L shared a word
           1F1 : 8800;  -- 	RETURN              ; Done
           1F2 : 7FFF;  -- c7FFF: DW &H7FFF
           1F3 : 0000;  -- m16sA: DW 0 ; multiplicand
           1F4 : 0000;  -- m16sB: DW 0 ; multipler
           1F5 : 0000;  -- m16sc: DW 0 ; carry
           1F6 : 0000;  -- mcnt16s: DW 0 ; counter
           1F7 : 0000;  -- mres16sL: DW 0 ; result low
           1F8 : 0000;  -- mres16sH: DW 0 ; result high
           1F9 : B800;  -- 	LOADI  0
           1FA : 1231;  -- 	STORE  dres16sR     ; clear remainder result
           1FB : 122E;  -- 	STORE  d16sC1       ; clear carry
           1FC : 0A2A;  -- 	LOAD   d16sN
           1FD : 5A2B;  -- 	XOR    d16sD
           1FE : 122C;  -- 	STORE  d16sS        ; sign determination = N XOR D
           1FF : B811;  -- 	LOADI  17
           200 : 122D;  -- 	STORE  d16sT        ; preload counter with 17 (16+1)
           201 : 0A2B;  -- 	LOAD   d16sD
           202 : 8167;  -- 	CALL   Abs          ; take absolute value of denominator
           203 : 122B;  -- 	STORE  d16sD
           204 : 0A2A;  -- 	LOAD   d16sN
           205 : 8167;  -- 	CALL   Abs          ; take absolute value of numerator
           206 : 122A;  -- 	STORE  d16sN
           207 : 0A2A;  -- 	LOAD   d16sN
           208 : 601F;  -- 	SHIFT  -15          ; get msb
           209 : 4A9E;  -- 	AND    One          ; only msb (because shift is arithmetic)
           20A : 122F;  -- 	STORE  d16sC2       ; store as carry
           20B : 0A2A;  -- 	LOAD   d16sN
           20C : 6001;  -- 	SHIFT  1            ; shift <<1
           20D : 522E;  -- 	OR     d16sC1       ; with carry
           20E : 122A;  -- 	STORE  d16sN
           20F : 0A2D;  -- 	LOAD   d16sT
           210 : 6FFF;  -- 	ADDI   -1           ; decrement counter
           211 : 4221;  -- 	JZERO  Div16s_sign  ; if finished looping, finalize result
           212 : 122D;  -- 	STORE  d16sT
           213 : 0A31;  -- 	LOAD   dres16sR
           214 : 6001;  -- 	SHIFT  1            ; shift remainder
           215 : 522F;  -- 	OR     d16sC2       ; with carry from other shift
           216 : 222B;  -- 	SUB    d16sD        ; subtract denominator from remainder
           217 : 321C;  -- 	JNEG   Div16s_add   ; if negative, need to add it back
           218 : 1231;  -- 	STORE  dres16sR
           219 : B801;  -- 	LOADI  1
           21A : 122E;  -- 	STORE  d16sC1       ; set carry
           21B : 2A07;  -- 	JUMP   Div16s_loop
           21C : 1A2B;  -- 	ADD    d16sD        ; add denominator back in
           21D : 1231;  -- 	STORE  dres16sR
           21E : B800;  -- 	LOADI  0
           21F : 122E;  -- 	STORE  d16sC1       ; clear carry
           220 : 2A07;  -- 	JUMP   Div16s_loop
           221 : 0A2A;  -- 	LOAD   d16sN
           222 : 1230;  -- 	STORE  dres16sQ     ; numerator was used to hold quotient result
           223 : 0A2C;  -- 	LOAD   d16sS        ; check the sign indicator
           224 : 3226;  -- 	JNEG   Div16s_neg
           225 : 8800;  -- 	RETURN
           226 : 0A30;  -- 	LOAD   dres16sQ     ; need to negate the result
           227 : 8168;  -- 	CALL   Neg
           228 : 1230;  -- 	STORE  dres16sQ
           229 : 8800;  -- 	RETURN	
           22A : 0000;  -- d16sN: DW 0 ; numerator
           22B : 0000;  -- d16sD: DW 0 ; denominator
           22C : 0000;  -- d16sS: DW 0 ; sign value
           22D : 0000;  -- d16sT: DW 0 ; temp counter
           22E : 0000;  -- d16sC1: DW 0 ; carry value
           22F : 0000;  -- d16sC2: DW 0 ; carry value
           230 : 0000;  -- dres16sQ: DW 0 ; quotient result
           231 : 0000;  -- dres16sR: DW 0 ; remainder result
           232 : 0A5C;  -- 	LOAD   L2X
           233 : 8167;  -- 	CALL   Abs
           234 : 125E;  -- 	STORE  L2T1
           235 : 0A5D;  -- 	LOAD   L2Y
           236 : 8167;  -- 	CALL   Abs
           237 : 225E;  -- 	SUB    L2T1
           238 : 3254;  -- 	JNEG   GDSwap    ; swap if needed to get largest value in X
           239 : 1A5E;  -- 	ADD    L2T1
           23A : 11F3;  -- 	STORE  m16sa
           23B : B8F6;  -- 	LOADI  246       ; max * 246
           23C : 11F4;  -- 	STORE  m16sB
           23D : 81D0;  -- 	CALL   Mult16s
           23E : 09F8;  -- 	LOAD   mres16sH
           23F : 6008;  -- 	SHIFT  8
           240 : 125F;  -- 	STORE  L2T2
           241 : 09F7;  -- 	LOAD   mres16sL
           242 : 6018;  -- 	SHIFT  -8        ; / 256
           243 : 4AB0;  -- 	AND    LowByte
           244 : 525F;  -- 	OR     L2T2
           245 : 1260;  -- 	STORE  L2T3
           246 : 0A5E;  -- 	LOAD   L2T1
           247 : 11F3;  -- 	STORE  m16sa
           248 : B868;  -- 	LOADI  104       ; min * 104
           249 : 11F4;  -- 	STORE  m16sB
           24A : 81D0;  -- 	CALL   Mult16s
           24B : 09F8;  -- 	LOAD   mres16sH
           24C : 6008;  -- 	SHIFT  8
           24D : 125F;  -- 	STORE  L2T2
           24E : 09F7;  -- 	LOAD   mres16sL
           24F : 6018;  -- 	SHIFT  -8        ; / 256
           250 : 4AB0;  -- 	AND    LowByte
           251 : 525F;  -- 	OR     L2T2
           252 : 1A60;  -- 	ADD    L2T3     ; sum
           253 : 8800;  -- 	RETURN
           254 : 1A5E;  -- 	ADD    L2T1
           255 : 125F;  -- 	STORE  L2T2
           256 : 0A5E;  -- 	LOAD   L2T1
           257 : 1260;  -- 	STORE  L2T3
           258 : 0A5F;  -- 	LOAD   L2T2
           259 : 125E;  -- 	STORE  L2T1
           25A : 0A60;  -- 	LOAD   L2T3
           25B : 2A3A;  -- 	JUMP   CalcDist
           25C : 0000;  -- L2X:  DW 0
           25D : 0000;  -- L2Y:  DW 0
           25E : 0000;  -- L2T1: DW 0
           25F : 0000;  -- L2T2: DW 0
           260 : 0000;  -- L2T3: DW 0
           261 : 9802;  -- 	OUT    TIMER
           262 : 9002;  -- 	IN     TIMER
           263 : 9807;  -- 	OUT    XLEDS       ; User-feedback that a pause is occurring.
           264 : 6FF6;  -- 	ADDI   -10         ; 1 second at 10Hz.
           265 : 3262;  -- 	JNEG   Wloop
           266 : 8800;  -- 	RETURN
           267 : 827F;  -- 	CALL   GetBattLvl
           268 : 4267;  -- 	JZERO  BattCheck   ; A/D hasn't had time to initialize
           269 : 22C0;  -- 	SUB    MinBatt
           26A : 326D;  -- 	JNEG   DeadBatt
           26B : 1AC0;  -- 	ADD    MinBatt     ; get original value back
           26C : 8800;  -- 	RETURN
           26D : B820;  -- 	LOADI  &H20
           26E : 980A;  -- 	OUT    BEEP        ; start beep sound
           26F : 827F;  -- 	CALL   GetBattLvl  ; get the battery level
           270 : 9804;  -- 	OUT    SSEG1       ; display it everywhere
           271 : 9805;  -- 	OUT    SSEG2
           272 : 9806;  -- 	OUT    LCD
           273 : 0A9D;  -- 	LOAD   Zero
           274 : 6FFF;  -- 	ADDI   -1          ; 0xFFFF
           275 : 9801;  -- 	OUT    LEDS        ; all LEDs on
           276 : 9807;  -- 	OUT    XLEDS
           277 : 8261;  -- 	CALL   Wait1       ; 1 second
           278 : B940;  -- 	LOADI  &H140       ; short, high-pitched beep
           279 : 980A;  -- 	OUT    BEEP        ; stop beeping
           27A : 0A9D;  -- 	LOAD   Zero
           27B : 9801;  -- 	OUT    LEDS        ; LEDs off
           27C : 9807;  -- 	OUT    XLEDS
           27D : 8261;  -- 	CALL   Wait1       ; 1 second
           27E : 2A6D;  -- 	JUMP   DeadBatt    ; repeat forever
           27F : 0AC2;  -- 	LOAD   I2CRCmd     ; 0x0190 (write 0B, read 1B, addr 0x90)
           280 : 9890;  -- 	OUT    I2C_CMD     ; to I2C_CMD
           281 : 9892;  -- 	OUT    I2C_RDY     ; start the communication
           282 : 828D;  -- 	CALL   BlockI2C    ; wait for it to finish
           283 : 9091;  -- 	IN     I2C_DATA    ; get the returned data
           284 : 8800;  -- 	RETURN
           285 : 828D;  -- 	CALL   BlockI2C    ; wait for idle
           286 : 0AC1;  -- 	LOAD   I2CWCmd     ; 0x1190 (write 1B, read 1B, addr 0x90)
           287 : 9890;  -- 	OUT    I2C_CMD     ; to I2C_CMD register
           288 : 0A9D;  -- 	LOAD   Zero        ; 0x0000 (A/D port 0, no increment)
           289 : 9891;  -- 	OUT    I2C_DATA    ; to I2C_DATA register
           28A : 9892;  -- 	OUT    I2C_RDY     ; start the communication
           28B : 828D;  -- 	CALL   BlockI2C    ; wait for it to finish
           28C : 8800;  -- 	RETURN
           28D : 0A9D;  -- 	LOAD   Zero
           28E : 129B;  -- 	STORE  Temp        ; Used to check for timeout
           28F : 0A9B;  -- 	LOAD   Temp
           290 : 6801;  -- 	ADDI   1           ; this will result in ~0.1s timeout
           291 : 129B;  -- 	STORE  Temp
           292 : 4296;  -- 	JZERO  I2CError    ; Timeout occurred; error
           293 : 9092;  -- 	IN     I2C_RDY     ; Read busy signal
           294 : 3A8F;  -- 	JPOS   BI2CL       ; If not 0, try again
           295 : 8800;  -- 	RETURN             ; Else return
           296 : 0A9D;  -- 	LOAD   Zero
           297 : 692C;  -- 	ADDI   &H12C       ; "I2C"
           298 : 9804;  -- 	OUT    SSEG1
           299 : 9805;  -- 	OUT    SSEG2       ; display error message
           29A : 2A96;  -- 	JUMP   I2CError
           29B : 0000;  -- Temp:     DW 0 ; "Temp" is not a great name, but can be useful
           29C : FFFF;  -- NegOne:   DW -1
           29D : 0000;  -- Zero:     DW 0
           29E : 0001;  -- One:      DW 1
           29F : 0002;  -- Two:      DW 2
           2A0 : 0003;  -- Three:    DW 3
           2A1 : 0004;  -- Four:     DW 4
           2A2 : 0005;  -- Five:     DW 5
           2A3 : 0006;  -- Six:      DW 6
           2A4 : 0007;  -- Seven:    DW 7
           2A5 : 0008;  -- Eight:    DW 8
           2A6 : 0009;  -- Nine:     DW 9
           2A7 : 000A;  -- Ten:      DW 10
           2A8 : 0001;  -- Mask0:    DW &B00000001
           2A9 : 0002;  -- Mask1:    DW &B00000010
           2AA : 0004;  -- Mask2:    DW &B00000100
           2AB : 0008;  -- Mask3:    DW &B00001000
           2AC : 0010;  -- Mask4:    DW &B00010000
           2AD : 0020;  -- Mask5:    DW &B00100000
           2AE : 0040;  -- Mask6:    DW &B01000000
           2AF : 0080;  -- Mask7:    DW &B10000000
           2B0 : 00FF;  -- LowByte:  DW &HFF      ; binary 00000000 1111111
           2B1 : 000F;  -- LowNibl:  DW &HF       ; 0000 0000 0000 1111
           2B2 : 03C1;  -- OneMeter: DW 961       ; ~1m in 1.04mm units
           2B3 : 01E1;  -- HalfMeter: DW 481      ; ~0.5m in 1.04mm units
           2B4 : 024A;  -- TwoFeet:  DW 586       ; ~2ft in 1.04mm units
           2B5 : 0125;  -- OneFoot:  DW 293       ; ~2ft in 1.04mm units
           2B6 : 005A;  -- Deg90:    DW 90        ; 90 degrees in odometer units
           2B7 : 00B4;  -- Deg180:   DW 180       ; 180
           2B8 : 010E;  -- Deg270:   DW 270       ; 270
           2B9 : 0168;  -- Deg360:   DW 360       ; can never actually happen; for math only
           2BA : 0064;  -- FSlow:    DW 100       ; 100 is about the lowest velocity value that will move
           2BB : FF9C;  -- RSlow:    DW -100
           2BC : 015E;  -- FMid:     DW 350       ; 350 is a medium speed
           2BD : FEA2;  -- RMid:     DW -350
           2BE : 01F4;  -- FFast:    DW 500       ; 500 is almost max speed (511 is max)
           2BF : FE0C;  -- RFast:    DW -500
           2C0 : 008C;  -- MinBatt:  DW 140       ; 14.0V - minimum safe battery voltage
           2C1 : 1190;  -- I2CWCmd:  DW &H1190    ; write one i2c byte, read one byte, addr 0x90
           2C2 : 0190;  -- I2CRCmd:  DW &H0190    ; write nothing, read one byte, addr 0x90
  END;
